/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the Attachment class.
 * @constructor
 * A attachment
 * @member {string} [contentType] mimetype/Contenttype for the file, either
 * ContentUrl or Content must be set depending on the mimetype
 * 
 * @member {string} [contentUrl] Url to content
 * 
 * @member {object} [content] Content Payload (for example, lat/long for
 * contentype="location"
 * 
 * @member {string} [fallbackText] (OPTIONAL-CARD) FallbackText - used for
 * downlevel clients, should be simple markup with links
 * 
 * @member {string} [title] (OPTIONAL-CARD) Title
 * 
 * @member {string} [titleLink] (OPTIONAL-CARD) link to use for the title
 * 
 * @member {string} [text] (OPTIONAL-CARD) The Text description the attachment
 * 
 * @member {string} [thumbnailUrl] (OPTIONAL-CARD) Thumbnail associated with
 * attachment
 * 
 */
function Attachment(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.contentType !== undefined) {
      this.contentType = parameters.contentType;
    }
    if (parameters.contentUrl !== undefined) {
      this.contentUrl = parameters.contentUrl;
    }
    if (parameters.content !== undefined) {
      this.content = parameters.content;
    }
    if (parameters.fallbackText !== undefined) {
      this.fallbackText = parameters.fallbackText;
    }
    if (parameters.title !== undefined) {
      this.title = parameters.title;
    }
    if (parameters.titleLink !== undefined) {
      this.titleLink = parameters.titleLink;
    }
    if (parameters.text !== undefined) {
      this.text = parameters.text;
    }
    if (parameters.thumbnailUrl !== undefined) {
      this.thumbnailUrl = parameters.thumbnailUrl;
    }
  }    
}


/**
 * Validate the payload against the Attachment schema
 *
 * @param {JSON} payload
 *
 */
Attachment.prototype.serialize = function () {
  var payload = {};
  if (this['contentType'] !== null && this['contentType'] !== undefined) {
    if (typeof this['contentType'].valueOf() !== 'string') {
      throw new Error('this[\'contentType\'] must be of type string.');
    }
    payload['contentType'] = this['contentType'];
  }

  if (this['contentUrl'] !== null && this['contentUrl'] !== undefined) {
    if (typeof this['contentUrl'].valueOf() !== 'string') {
      throw new Error('this[\'contentUrl\'] must be of type string.');
    }
    payload['contentUrl'] = this['contentUrl'];
  }

  if (this['content'] !== null && this['content'] !== undefined) {
    if (typeof this['content'] !== 'object') {
      throw new Error('this[\'content\'] must be of type object.');
    }
    payload['content'] = this['content'];
  }

  if (this['fallbackText'] !== null && this['fallbackText'] !== undefined) {
    if (typeof this['fallbackText'].valueOf() !== 'string') {
      throw new Error('this[\'fallbackText\'] must be of type string.');
    }
    payload['fallbackText'] = this['fallbackText'];
  }

  if (this['title'] !== null && this['title'] !== undefined) {
    if (typeof this['title'].valueOf() !== 'string') {
      throw new Error('this[\'title\'] must be of type string.');
    }
    payload['title'] = this['title'];
  }

  if (this['titleLink'] !== null && this['titleLink'] !== undefined) {
    if (typeof this['titleLink'].valueOf() !== 'string') {
      throw new Error('this[\'titleLink\'] must be of type string.');
    }
    payload['titleLink'] = this['titleLink'];
  }

  if (this['text'] !== null && this['text'] !== undefined) {
    if (typeof this['text'].valueOf() !== 'string') {
      throw new Error('this[\'text\'] must be of type string.');
    }
    payload['text'] = this['text'];
  }

  if (this['thumbnailUrl'] !== null && this['thumbnailUrl'] !== undefined) {
    if (typeof this['thumbnailUrl'].valueOf() !== 'string') {
      throw new Error('this[\'thumbnailUrl\'] must be of type string.');
    }
    payload['thumbnailUrl'] = this['thumbnailUrl'];
  }

  return payload;
};

/**
 * Deserialize the instance to Attachment schema
 *
 * @param {JSON} instance
 *
 */
Attachment.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['contentType'] !== undefined) {
      this['contentType'] = instance['contentType'];
    }

    if (instance['contentUrl'] !== undefined) {
      this['contentUrl'] = instance['contentUrl'];
    }

    if (instance['content'] !== undefined) {
      this['content'] = instance['content'];
    }

    if (instance['fallbackText'] !== undefined) {
      this['fallbackText'] = instance['fallbackText'];
    }

    if (instance['title'] !== undefined) {
      this['title'] = instance['title'];
    }

    if (instance['titleLink'] !== undefined) {
      this['titleLink'] = instance['titleLink'];
    }

    if (instance['text'] !== undefined) {
      this['text'] = instance['text'];
    }

    if (instance['thumbnailUrl'] !== undefined) {
      this['thumbnailUrl'] = instance['thumbnailUrl'];
    }
  }

  return this;
};

module.exports = Attachment;
