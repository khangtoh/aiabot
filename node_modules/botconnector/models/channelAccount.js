/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the ChannelAccount class.
 * @constructor
 * Channel account information needed to route a message
 * @member {string} [name] Display friendly name of the user or bot
 * 
 * @member {string} channelId Channel Id that the channelAccount is to be
 * communicated with (Example: slack, sms, email, groupme, skype, twitter,
 * etc.)
 * 
 * @member {string} [address] Channel Address for the channelAccount (Example:
 * joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [id] Id - id of the shared bot or user this channelaccount
 * refers to
 * 
 * @member {boolean} [isBot] Is this id a bot?
 * 
 */
function ChannelAccount(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.channelId !== undefined) {
      this.channelId = parameters.channelId;
    }
    if (parameters.address !== undefined) {
      this.address = parameters.address;
    }
    if (parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.isBot !== undefined) {
      this.isBot = parameters.isBot;
    }
  }    
}


/**
 * Validate the payload against the ChannelAccount schema
 *
 * @param {JSON} payload
 *
 */
ChannelAccount.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['channelId'] === null || this['channelId'] === undefined || typeof this['channelId'].valueOf() !== 'string') {
    throw new Error('this[\'channelId\'] cannot be null or undefined and it must be of type string.');
  }
  payload['channelId'] = this['channelId'];

  if (this['address'] !== null && this['address'] !== undefined) {
    if (typeof this['address'].valueOf() !== 'string') {
      throw new Error('this[\'address\'] must be of type string.');
    }
    payload['address'] = this['address'];
  }

  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['isBot'] !== null && this['isBot'] !== undefined) {
    if (typeof this['isBot'] !== 'boolean') {
      throw new Error('this[\'isBot\'] must be of type boolean.');
    }
    payload['isBot'] = this['isBot'];
  }

  return payload;
};

/**
 * Deserialize the instance to ChannelAccount schema
 *
 * @param {JSON} instance
 *
 */
ChannelAccount.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['channelId'] !== undefined) {
      this['channelId'] = instance['channelId'];
    }

    if (instance['address'] !== undefined) {
      this['address'] = instance['address'];
    }

    if (instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['isBot'] !== undefined) {
      this['isBot'] = instance['isBot'];
    }
  }

  return this;
};

module.exports = ChannelAccount;
