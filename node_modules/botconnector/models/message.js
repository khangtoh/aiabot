/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Message class.
 * @constructor
 * A Microsoft.Bot.Connector message
 * @member {string} [type] The type of the message. Possible values for this
 * property include: 'Message', 'Ping', 'DeleteUserData',
 * 'BotAddedToConversation', 'BotRemovedFromConversation',
 * 'UserAddedToConversation', 'UserRemovedFromConversation',
 * 'EndOfConversation'.
 * 
 * @member {string} [id] Id for the message (always assigned by transport)
 * 
 * @member {string} [conversationId] Bot.Connector ConverationId id (always
 * assigned by transport)
 * 
 * @member {date} [created] Timestamp of when the message was created
 * 
 * @member {string} [sourceText] (if translated) The OriginalText of the
 * message
 * 
 * @member {string} [sourceLanguage] (if translated) The language of the
 * original message.
 * 
 * @member {string} [language] The language code of the Text field
 * 
 * @member {string} [text] The text of the message
 * 
 * @member {array} [attachments] Array of content attachments to things like
 * images
 * 
 * @member {object} [from] ChannelAccount of the user or bot that is sending
 * the message
 * 
 * @member {string} [from.name] Display friendly name of the user or bot
 * 
 * @member {string} [from.channelId] Channel Id that the channelAccount is to
 * be communicated with (Example: slack, sms, email, groupme, skype, twitter,
 * etc.)
 * 
 * @member {string} [from.address] Channel Address for the channelAccount
 * (Example: joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [from.id] Id - id of the shared bot or user this
 * channelaccount refers to
 * 
 * @member {boolean} [from.isBot] Is this id a bot?
 * 
 * @member {object} [to] ChannelAccount of hte user or bot the message is
 * being routed to
 * 
 * @member {string} [to.name] Display friendly name of the user or bot
 * 
 * @member {string} [to.channelId] Channel Id that the channelAccount is to be
 * communicated with (Example: slack, sms, email, groupme, skype, twitter,
 * etc.)
 * 
 * @member {string} [to.address] Channel Address for the channelAccount
 * (Example: joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [to.id] Id - id of the shared bot or user this
 * channelaccount refers to
 * 
 * @member {boolean} [to.isBot] Is this id a bot?
 * 
 * @member {string} [replyToMessageId] The message Id that this message is a
 * reply to
 * 
 * @member {array} [participants] List of ChannelAccounts in the conversation
 * 
 * @member {number} [totalParticipants] Total participants in the
 * conversation.  2 means 1:1 message  User - Bot
 * 
 * @member {array} [mentions] Array of mentions from the channel context
 * 
 * @member {string} [place] Place in user readable format:
 * 
 * @member {string} [channelMessageId] Channel Message Id
 * 
 * @member {string} [channelConversationId] Channel Conversation Id
 * 
 * @member {object} [channelData] Channel specific payload
 * 
 * @member {object} [botUserData] Bot's User data object
 * 
 * @member {object} [botConversationData] Bot's Conversation Data object
 * 
 * @member {object} [botPerUserInConversationData] Bot's Per User in a
 * conversation data object
 * 
 * @member {object} [location] Location information (see
 * https://dev.onedrive.com/facets/location_facet.htm)
 * 
 * @member {number} [location.altitude] Altitude
 * 
 * @member {number} [location.latitude] Latitude for the user when the message
 * was created
 * 
 * @member {number} [location.longitude] Longitude for the user when the
 * message was created
 * 
 * @member {string} [location.name] Name for user location when the message
 * was created
 * 
 * @member {array} [hashtags] Hashtags for the message
 * 
 * @member {string} [eTag]
 * 
 */
function Message(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.conversationId !== undefined) {
      this.conversationId = parameters.conversationId;
    }
    if (parameters.created !== undefined) {
      this.created = parameters.created;
    }
    if (parameters.sourceText !== undefined) {
      this.sourceText = parameters.sourceText;
    }
    if (parameters.sourceLanguage !== undefined) {
      this.sourceLanguage = parameters.sourceLanguage;
    }
    if (parameters.language !== undefined) {
      this.language = parameters.language;
    }
    if (parameters.text !== undefined) {
      this.text = parameters.text;
    }
    if (parameters.attachments) {
      var tempParametersattachments = [];
      parameters.attachments.forEach(function(element) {
        if (element) {
          element = new models['Attachment'](element);
        }
        tempParametersattachments.push(element);
      });
      this.attachments = tempParametersattachments;
    }
    if (parameters.from) {
      this.from = new models['ChannelAccount'](parameters.from);
    }
    if (parameters.to) {
      this.to = new models['ChannelAccount'](parameters.to);
    }
    if (parameters.replyToMessageId !== undefined) {
      this.replyToMessageId = parameters.replyToMessageId;
    }
    if (parameters.participants) {
      var tempParametersparticipants = [];
      parameters.participants.forEach(function(element1) {
        if (element1) {
          element1 = new models['ChannelAccount'](element1);
        }
        tempParametersparticipants.push(element1);
      });
      this.participants = tempParametersparticipants;
    }
    if (parameters.totalParticipants !== undefined) {
      this.totalParticipants = parameters.totalParticipants;
    }
    if (parameters.mentions) {
      var tempParametersmentions = [];
      parameters.mentions.forEach(function(element2) {
        if (element2) {
          element2 = new models['Mention'](element2);
        }
        tempParametersmentions.push(element2);
      });
      this.mentions = tempParametersmentions;
    }
    if (parameters.place !== undefined) {
      this.place = parameters.place;
    }
    if (parameters.channelMessageId !== undefined) {
      this.channelMessageId = parameters.channelMessageId;
    }
    if (parameters.channelConversationId !== undefined) {
      this.channelConversationId = parameters.channelConversationId;
    }
    if (parameters.channelData !== undefined) {
      this.channelData = parameters.channelData;
    }
    if (parameters.botUserData !== undefined) {
      this.botUserData = parameters.botUserData;
    }
    if (parameters.botConversationData !== undefined) {
      this.botConversationData = parameters.botConversationData;
    }
    if (parameters.botPerUserInConversationData !== undefined) {
      this.botPerUserInConversationData = parameters.botPerUserInConversationData;
    }
    if (parameters.location) {
      this.location = new models['Location'](parameters.location);
    }
    if (parameters.hashtags) {
      var tempParametershashtags = [];
      parameters.hashtags.forEach(function(element3) {
        if (element3 !== undefined) {
          element3 = element3;
        }
        tempParametershashtags.push(element3);
      });
      this.hashtags = tempParametershashtags;
    }
    if (parameters.eTag !== undefined) {
      this.eTag = parameters.eTag;
    }
  }    
}


/**
 * Validate the payload against the Message schema
 *
 * @param {JSON} payload
 *
 */
Message.prototype.serialize = function () {
  var payload = {};
  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['type'] = this['type'];
  }

  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    if (this['id'].length > 64)
    {
      throw new Error('"this[\'id\']" should satisfy the constraint - "MaxLength": 64');
    }
    if (this['id'].length < 0)
    {
      throw new Error('"this[\'id\']" should satisfy the constraint - "MinLength": 0');
    }
    payload['id'] = this['id'];
  }

  if (this['conversationId'] !== null && this['conversationId'] !== undefined) {
    if (typeof this['conversationId'].valueOf() !== 'string') {
      throw new Error('this[\'conversationId\'] must be of type string.');
    }
    if (this['conversationId'].length > 64)
    {
      throw new Error('"this[\'conversationId\']" should satisfy the constraint - "MaxLength": 64');
    }
    if (this['conversationId'].length < 0)
    {
      throw new Error('"this[\'conversationId\']" should satisfy the constraint - "MinLength": 0');
    }
    payload['conversationId'] = this['conversationId'];
  }

  if (this['created']) {
    if (!(this['created'] instanceof Date || typeof this['created'].valueOf() === 'string' && !isNaN(Date.parse(this['created'])))) {
      throw new Error('this[\'created\'] must be of type date.');
    }
    payload['created'] = (this['created'] instanceof Date) ? this['created'].toISOString() : this['created'];
  }

  if (this['sourceText'] !== null && this['sourceText'] !== undefined) {
    if (typeof this['sourceText'].valueOf() !== 'string') {
      throw new Error('this[\'sourceText\'] must be of type string.');
    }
    payload['sourceText'] = this['sourceText'];
  }

  if (this['sourceLanguage'] !== null && this['sourceLanguage'] !== undefined) {
    if (typeof this['sourceLanguage'].valueOf() !== 'string') {
      throw new Error('this[\'sourceLanguage\'] must be of type string.');
    }
    payload['sourceLanguage'] = this['sourceLanguage'];
  }

  if (this['language'] !== null && this['language'] !== undefined) {
    if (typeof this['language'].valueOf() !== 'string') {
      throw new Error('this[\'language\'] must be of type string.');
    }
    payload['language'] = this['language'];
  }

  if (this['text'] !== null && this['text'] !== undefined) {
    if (typeof this['text'].valueOf() !== 'string') {
      throw new Error('this[\'text\'] must be of type string.');
    }
    if (this['text'].length > 8192)
    {
      throw new Error('"this[\'text\']" should satisfy the constraint - "MaxLength": 8192');
    }
    if (this['text'].length < 0)
    {
      throw new Error('"this[\'text\']" should satisfy the constraint - "MinLength": 0');
    }
    payload['text'] = this['text'];
  }

  if (util.isArray(this['attachments'])) {
    payload['attachments'] = [];
    for (var i = 0; i < this['attachments'].length; i++) {
      if (this['attachments'][i]) {
        if (payload['attachments'] === null || payload['attachments'] === undefined) {
          payload['attachments'] = {};
        }
        payload['attachments'][i] = this['attachments'][i].serialize();
      }
    }
  }

  if (this['from']) {
    payload['from'] = this['from'].serialize();
  }

  if (this['to']) {
    payload['to'] = this['to'].serialize();
  }

  if (this['replyToMessageId'] !== null && this['replyToMessageId'] !== undefined) {
    if (typeof this['replyToMessageId'].valueOf() !== 'string') {
      throw new Error('this[\'replyToMessageId\'] must be of type string.');
    }
    if (this['replyToMessageId'].length > 128)
    {
      throw new Error('"this[\'replyToMessageId\']" should satisfy the constraint - "MaxLength": 128');
    }
    if (this['replyToMessageId'].length < 0)
    {
      throw new Error('"this[\'replyToMessageId\']" should satisfy the constraint - "MinLength": 0');
    }
    payload['replyToMessageId'] = this['replyToMessageId'];
  }

  if (util.isArray(this['participants'])) {
    payload['participants'] = [];
    for (var i1 = 0; i1 < this['participants'].length; i1++) {
      if (this['participants'][i1]) {
        if (payload['participants'] === null || payload['participants'] === undefined) {
          payload['participants'] = {};
        }
        payload['participants'][i1] = this['participants'][i1].serialize();
      }
    }
  }

  if (this['totalParticipants'] !== null && this['totalParticipants'] !== undefined) {
    if (typeof this['totalParticipants'] !== 'number') {
      throw new Error('this[\'totalParticipants\'] must be of type number.');
    }
    payload['totalParticipants'] = this['totalParticipants'];
  }

  if (util.isArray(this['mentions'])) {
    payload['mentions'] = [];
    for (var i2 = 0; i2 < this['mentions'].length; i2++) {
      if (this['mentions'][i2]) {
        if (payload['mentions'] === null || payload['mentions'] === undefined) {
          payload['mentions'] = {};
        }
        payload['mentions'][i2] = this['mentions'][i2].serialize();
      }
    }
  }

  if (this['place'] !== null && this['place'] !== undefined) {
    if (typeof this['place'].valueOf() !== 'string') {
      throw new Error('this[\'place\'] must be of type string.');
    }
    payload['place'] = this['place'];
  }

  if (this['channelMessageId'] !== null && this['channelMessageId'] !== undefined) {
    if (typeof this['channelMessageId'].valueOf() !== 'string') {
      throw new Error('this[\'channelMessageId\'] must be of type string.');
    }
    if (this['channelMessageId'].length > 256)
    {
      throw new Error('"this[\'channelMessageId\']" should satisfy the constraint - "MaxLength": 256');
    }
    if (this['channelMessageId'].length < 0)
    {
      throw new Error('"this[\'channelMessageId\']" should satisfy the constraint - "MinLength": 0');
    }
    payload['channelMessageId'] = this['channelMessageId'];
  }

  if (this['channelConversationId'] !== null && this['channelConversationId'] !== undefined) {
    if (typeof this['channelConversationId'].valueOf() !== 'string') {
      throw new Error('this[\'channelConversationId\'] must be of type string.');
    }
    if (this['channelConversationId'].length > 255)
    {
      throw new Error('"this[\'channelConversationId\']" should satisfy the constraint - "MaxLength": 255');
    }
    if (this['channelConversationId'].length < 0)
    {
      throw new Error('"this[\'channelConversationId\']" should satisfy the constraint - "MinLength": 0');
    }
    payload['channelConversationId'] = this['channelConversationId'];
  }

  if (this['channelData'] !== null && this['channelData'] !== undefined) {
    if (typeof this['channelData'] !== 'object') {
      throw new Error('this[\'channelData\'] must be of type object.');
    }
    payload['channelData'] = this['channelData'];
  }

  if (this['botUserData'] !== null && this['botUserData'] !== undefined) {
    if (typeof this['botUserData'] !== 'object') {
      throw new Error('this[\'botUserData\'] must be of type object.');
    }
    payload['botUserData'] = this['botUserData'];
  }

  if (this['botConversationData'] !== null && this['botConversationData'] !== undefined) {
    if (typeof this['botConversationData'] !== 'object') {
      throw new Error('this[\'botConversationData\'] must be of type object.');
    }
    payload['botConversationData'] = this['botConversationData'];
  }

  if (this['botPerUserInConversationData'] !== null && this['botPerUserInConversationData'] !== undefined) {
    if (typeof this['botPerUserInConversationData'] !== 'object') {
      throw new Error('this[\'botPerUserInConversationData\'] must be of type object.');
    }
    payload['botPerUserInConversationData'] = this['botPerUserInConversationData'];
  }

  if (this['location']) {
    payload['location'] = this['location'].serialize();
  }

  if (util.isArray(this['hashtags'])) {
    payload['hashtags'] = [];
    for (var i3 = 0; i3 < this['hashtags'].length; i3++) {
      if (this['hashtags'][i3] !== null && this['hashtags'][i3] !== undefined) {
        if (typeof this['hashtags'][i3].valueOf() !== 'string') {
          throw new Error('this[\'hashtags\'][i3] must be of type string.');
        }
        if (payload['hashtags'] === null || payload['hashtags'] === undefined) {
          payload['hashtags'] = {};
        }
        payload['hashtags'][i3] = this['hashtags'][i3];
      }
    }
  }

  if (this['eTag'] !== null && this['eTag'] !== undefined) {
    if (typeof this['eTag'].valueOf() !== 'string') {
      throw new Error('this[\'eTag\'] must be of type string.');
    }
    payload['eTag'] = this['eTag'];
  }

  return payload;
};

/**
 * Deserialize the instance to Message schema
 *
 * @param {JSON} instance
 *
 */
Message.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['conversationId'] !== undefined) {
      this['conversationId'] = instance['conversationId'];
    }

    if (instance['created']) {
      this['created'] = new Date(instance['created']);
    }
    else if (instance['created'] !== undefined) {
      this['created'] = instance['created'];
    }

    if (instance['sourceText'] !== undefined) {
      this['sourceText'] = instance['sourceText'];
    }

    if (instance['sourceLanguage'] !== undefined) {
      this['sourceLanguage'] = instance['sourceLanguage'];
    }

    if (instance['language'] !== undefined) {
      this['language'] = instance['language'];
    }

    if (instance['text'] !== undefined) {
      this['text'] = instance['text'];
    }

    if (instance['attachments']) {
      var tempInstanceattachments = [];
      instance['attachments'].forEach(function(element4) {
        if (element4) {
          element4 = new models['Attachment']().deserialize(element4);
        }
        tempInstanceattachments.push(element4);
      });
      this['attachments'] = tempInstanceattachments;
    }

    if (instance['from']) {
      this['from'] = new models['ChannelAccount']().deserialize(instance['from']);
    }

    if (instance['to']) {
      this['to'] = new models['ChannelAccount']().deserialize(instance['to']);
    }

    if (instance['replyToMessageId'] !== undefined) {
      this['replyToMessageId'] = instance['replyToMessageId'];
    }

    if (instance['participants']) {
      var tempInstanceparticipants = [];
      instance['participants'].forEach(function(element5) {
        if (element5) {
          element5 = new models['ChannelAccount']().deserialize(element5);
        }
        tempInstanceparticipants.push(element5);
      });
      this['participants'] = tempInstanceparticipants;
    }

    if (instance['totalParticipants'] !== undefined) {
      this['totalParticipants'] = instance['totalParticipants'];
    }

    if (instance['mentions']) {
      var tempInstancementions = [];
      instance['mentions'].forEach(function(element6) {
        if (element6) {
          element6 = new models['Mention']().deserialize(element6);
        }
        tempInstancementions.push(element6);
      });
      this['mentions'] = tempInstancementions;
    }

    if (instance['place'] !== undefined) {
      this['place'] = instance['place'];
    }

    if (instance['channelMessageId'] !== undefined) {
      this['channelMessageId'] = instance['channelMessageId'];
    }

    if (instance['channelConversationId'] !== undefined) {
      this['channelConversationId'] = instance['channelConversationId'];
    }

    if (instance['channelData'] !== undefined) {
      this['channelData'] = instance['channelData'];
    }

    if (instance['botUserData'] !== undefined) {
      this['botUserData'] = instance['botUserData'];
    }

    if (instance['botConversationData'] !== undefined) {
      this['botConversationData'] = instance['botConversationData'];
    }

    if (instance['botPerUserInConversationData'] !== undefined) {
      this['botPerUserInConversationData'] = instance['botPerUserInConversationData'];
    }

    if (instance['location']) {
      this['location'] = new models['Location']().deserialize(instance['location']);
    }

    if (instance['hashtags']) {
      var tempInstancehashtags = [];
      instance['hashtags'].forEach(function(element7) {
        if (element7 !== undefined) {
          element7 = element7;
        }
        tempInstancehashtags.push(element7);
      });
      this['hashtags'] = tempInstancehashtags;
    }

    if (instance['eTag'] !== undefined) {
      this['eTag'] = instance['eTag'];
    }
  }

  return this;
};

module.exports = Message;
