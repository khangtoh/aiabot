/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


/**
 * @class
 * Initializes a new instance of the BotData class.
 * @constructor
 * Public facing bot data
 * @member {object} [data] State data
 * 
 * @member {string} [eTag]
 * 
 */
export interface BotData {
    data?: any;
    eTag?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorMessage class.
 * @constructor
 * A standardized message error payload
 * @member {object} [error]
 * 
 * @member {string} [error.code] Error code. Possible values for this property
 * include: 'MissingProperty', 'MalformedData', 'NotFound', 'ServiceError',
 * 'Internal', 'InvalidRange', 'NotSupported', 'NotAllowed', 'BadCertificate'.
 * 
 * @member {string} [error.message] Error message
 * 
 * @member {number} [error.statusCode] Status code
 * 
 */
export interface ErrorMessage {
    error?: ErrorModel;
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * @member {string} [code] Error code. Possible values for this property
 * include: 'MissingProperty', 'MalformedData', 'NotFound', 'ServiceError',
 * 'Internal', 'InvalidRange', 'NotSupported', 'NotAllowed', 'BadCertificate'.
 * 
 * @member {string} [message] Error message
 * 
 * @member {number} [statusCode] Status code
 * 
 */
export interface ErrorModel {
    code?: string;
    message?: string;
    statusCode?: number;
}

/**
 * @class
 * Initializes a new instance of the Message class.
 * @constructor
 * A Microsoft.Bot.Connector message
 * @member {string} [type] The type of the message. Possible values for this
 * property include: 'Message', 'Ping', 'DeleteUserData',
 * 'BotAddedToConversation', 'BotRemovedFromConversation',
 * 'UserAddedToConversation', 'UserRemovedFromConversation',
 * 'EndOfConversation'.
 * 
 * @member {string} [id] Id for the message (always assigned by transport)
 * 
 * @member {string} [conversationId] Bot.Connector ConverationId id (always
 * assigned by transport)
 * 
 * @member {date} [created] Timestamp of when the message was created
 * 
 * @member {string} [sourceText] (if translated) The OriginalText of the
 * message
 * 
 * @member {string} [sourceLanguage] (if translated) The language of the
 * original message.
 * 
 * @member {string} [language] The language code of the Text field
 * 
 * @member {string} [text] The text of the message
 * 
 * @member {array} [attachments] Array of content attachments to things like
 * images
 * 
 * @member {object} [from] ChannelAccount of the user or bot that is sending
 * the message
 * 
 * @member {string} [from.name] Display friendly name of the user or bot
 * 
 * @member {string} [from.channelId] Channel Id that the channelAccount is to
 * be communicated with (Example: slack, sms, email, groupme, skype, twitter,
 * etc.)
 * 
 * @member {string} [from.address] Channel Address for the channelAccount
 * (Example: joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [from.id] Id - id of the shared bot or user this
 * channelaccount refers to
 * 
 * @member {boolean} [from.isBot] Is this id a bot?
 * 
 * @member {object} [to] ChannelAccount of hte user or bot the message is
 * being routed to
 * 
 * @member {string} [to.name] Display friendly name of the user or bot
 * 
 * @member {string} [to.channelId] Channel Id that the channelAccount is to be
 * communicated with (Example: slack, sms, email, groupme, skype, twitter,
 * etc.)
 * 
 * @member {string} [to.address] Channel Address for the channelAccount
 * (Example: joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [to.id] Id - id of the shared bot or user this
 * channelaccount refers to
 * 
 * @member {boolean} [to.isBot] Is this id a bot?
 * 
 * @member {string} [replyToMessageId] The message Id that this message is a
 * reply to
 * 
 * @member {array} [participants] List of ChannelAccounts in the conversation
 * 
 * @member {number} [totalParticipants] Total participants in the
 * conversation.  2 means 1:1 message  User - Bot
 * 
 * @member {array} [mentions] Array of mentions from the channel context
 * 
 * @member {string} [place] Place in user readable format:
 * 
 * @member {string} [channelMessageId] Channel Message Id
 * 
 * @member {string} [channelConversationId] Channel Conversation Id
 * 
 * @member {object} [channelData] Channel specific payload
 * 
 * @member {object} [botUserData] Bot's User data object
 * 
 * @member {object} [botConversationData] Bot's Conversation Data object
 * 
 * @member {object} [botPerUserInConversationData] Bot's Per User in a
 * conversation data object
 * 
 * @member {object} [location] Location information (see
 * https://dev.onedrive.com/facets/location_facet.htm)
 * 
 * @member {number} [location.altitude] Altitude
 * 
 * @member {number} [location.latitude] Latitude for the user when the message
 * was created
 * 
 * @member {number} [location.longitude] Longitude for the user when the
 * message was created
 * 
 * @member {string} [location.name] Name for user location when the message
 * was created
 * 
 * @member {array} [hashtags] Hashtags for the message
 * 
 * @member {string} [eTag]
 * 
 */
export interface Message {
    type?: string;
    id?: string;
    conversationId?: string;
    created?: Date;
    sourceText?: string;
    sourceLanguage?: string;
    language?: string;
    text?: string;
    attachments?: Attachment[];
    from?: ChannelAccount;
    to?: ChannelAccount;
    replyToMessageId?: string;
    participants?: ChannelAccount[];
    totalParticipants?: number;
    mentions?: Mention[];
    place?: string;
    channelMessageId?: string;
    channelConversationId?: string;
    channelData?: any;
    botUserData?: any;
    botConversationData?: any;
    botPerUserInConversationData?: any;
    location?: Location;
    hashtags?: string[];
    eTag?: string;
}

/**
 * @class
 * Initializes a new instance of the Attachment class.
 * @constructor
 * A attachment
 * @member {string} [contentType] mimetype/Contenttype for the file, either
 * ContentUrl or Content must be set depending on the mimetype
 * 
 * @member {string} [contentUrl] Url to content
 * 
 * @member {object} [content] Content Payload (for example, lat/long for
 * contentype="location"
 * 
 * @member {string} [fallbackText] (OPTIONAL-CARD) FallbackText - used for
 * downlevel clients, should be simple markup with links
 * 
 * @member {string} [title] (OPTIONAL-CARD) Title
 * 
 * @member {string} [titleLink] (OPTIONAL-CARD) link to use for the title
 * 
 * @member {string} [text] (OPTIONAL-CARD) The Text description the attachment
 * 
 * @member {string} [thumbnailUrl] (OPTIONAL-CARD) Thumbnail associated with
 * attachment
 * 
 */
export interface Attachment {
    contentType?: string;
    contentUrl?: string;
    content?: any;
    fallbackText?: string;
    title?: string;
    titleLink?: string;
    text?: string;
    thumbnailUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the ChannelAccount class.
 * @constructor
 * Channel account information needed to route a message
 * @member {string} [name] Display friendly name of the user or bot
 * 
 * @member {string} channelId Channel Id that the channelAccount is to be
 * communicated with (Example: slack, sms, email, groupme, skype, twitter,
 * etc.)
 * 
 * @member {string} [address] Channel Address for the channelAccount (Example:
 * joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [id] Id - id of the shared bot or user this channelaccount
 * refers to
 * 
 * @member {boolean} [isBot] Is this id a bot?
 * 
 */
export interface ChannelAccount {
    name?: string;
    channelId: string;
    address?: string;
    id?: string;
    isBot?: boolean;
}

/**
 * @class
 * Initializes a new instance of the Mention class.
 * @constructor
 * Mention information
 * @member {object} [mentioned] The mentioned user
 * 
 * @member {string} [mentioned.name] Display friendly name of the user or bot
 * 
 * @member {string} [mentioned.channelId] Channel Id that the channelAccount
 * is to be communicated with (Example: slack, sms, email, groupme, skype,
 * twitter, etc.)
 * 
 * @member {string} [mentioned.address] Channel Address for the channelAccount
 * (Example: joe@smith.com, or @joesmith or 123456)
 * 
 * @member {string} [mentioned.id] Id - id of the shared bot or user this
 * channelaccount refers to
 * 
 * @member {boolean} [mentioned.isBot] Is this id a bot?
 * 
 * @member {string} [text] Sub Text which represents the mention (can be null
 * or empty)
 * 
 */
export interface Mention {
    mentioned?: ChannelAccount;
    text?: string;
}

/**
 * @class
 * Initializes a new instance of the Location class.
 * @constructor
 * @member {number} [altitude] Altitude
 * 
 * @member {number} [latitude] Latitude for the user when the message was
 * created
 * 
 * @member {number} [longitude] Longitude for the user when the message was
 * created
 * 
 * @member {string} [name] Name for user location when the message was created
 * 
 */
export interface Location {
    altitude?: number;
    latitude?: number;
    longitude?: number;
    name?: string;
}
