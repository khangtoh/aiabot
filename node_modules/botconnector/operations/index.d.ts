/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Bots
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ConnectorClient.
 */
export interface Bots {

    /**
     * @summary GetUserData
     *
     * Get a BotData record for the user
     *
     * @param {string} botId The BotId
     * 
     * @param {string} userId The user Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUserData(botId: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getUserData(botId: string, userId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary SetUserData
     *
     * Update the bot user data
     *
     * @param {string} botId The BotId
     * 
     * @param {string} userId The user Id
     * 
     * @param {object} botData the new botdata
     * 
     * @param {object} [botData.data] State data
     * 
     * @param {string} [botData.eTag]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setUserData(botId: string, userId: string, botData: models.BotData, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    setUserData(botId: string, userId: string, botData: models.BotData, callback: ServiceCallback<any>): void;

    /**
     * @summary GetConversationData
     *
     * get the bot data for a conversation
     *
     * @param {string} botId The BotId
     * 
     * @param {string} conversationId The conversationId
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getConversationData(botId: string, conversationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getConversationData(botId: string, conversationId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary SetConversationData
     *
     * Update the bot conversation data
     *
     * @param {string} botId The BotId
     * 
     * @param {string} conversationId conversation id
     * 
     * @param {object} botData the new botdata
     * 
     * @param {object} [botData.data] State data
     * 
     * @param {string} [botData.eTag]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setConversationData(botId: string, conversationId: string, botData: models.BotData, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    setConversationData(botId: string, conversationId: string, botData: models.BotData, callback: ServiceCallback<any>): void;

    /**
     * @summary GetPerUserConversationData
     *
     * get the bot data for a user in a conversation
     *
     * @param {string} botId The BotId
     * 
     * @param {string} conversationId The conversationId
     * 
     * @param {string} userId The user Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPerUserConversationData(botId: string, conversationId: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getPerUserConversationData(botId: string, conversationId: string, userId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary SetPerUserInConversationData
     *
     * Update the bot user in a conversation data
     *
     * @param {string} botId The BotId
     * 
     * @param {string} conversationId conversation id
     * 
     * @param {string} userId user id
     * 
     * @param {object} botData the new botdata
     * 
     * @param {object} [botData.data] State data
     * 
     * @param {string} [botData.eTag]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setPerUserInConversationData(botId: string, conversationId: string, userId: string, botData: models.BotData, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    setPerUserInConversationData(botId: string, conversationId: string, userId: string, botData: models.BotData, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Messages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ConnectorClient.
 */
export interface Messages {

    /**
     * @summary Send a message
     *
     * This method allows you to initiate a new conversation message with the
     * user.
     * 
     * The important fields are:
     * 
     * |Property    | Description
     * |Example
     * 
     * |------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * ------------------------------------
     * |From        | The ChannelAccount of the Bot you want to send the message
     * from
     * |
     * SMS:+4255551212 (the bots address)
     * |To          | The channelAccount of the user you to start a conversation
     * with
     * |
     * SMS:+4255551111 (the users address)
     * |Text        | The message you want to communicate
     * |
     * Text: "Hello world"
     * |Language    | The language your message is expressed in (important if you
     * have translation enabled) using the [language codes from Microsoft
     * Translator](https://msdn.microsoft.com/en-us/library/hh456380.aspx) |
     * Language: "en"
     * |Attachments | Attachments represent images and attachments that will be
     * rendered on the platform as appropriate
     * |
     * ...
     * |ChannelData | You can pass channel specific data to get custom native
     * rendering of your message on a per channel basis. See channel
     * documentation for information on what channels are expecting for this
     * | ...
     * 
     * Bots can track state data by User, Conversation and Users within the
     * Conversation by embedding data objects into the message.
     * This data will be stored in persistent storage and reflected back to the
     * bot with all future messages as appropriate to their scope.
     * 
     * The properties you use to for Bot State are:
     * 
     * |Property                   | Description
     * |
     * Example
     * |-------------------------- |
     * ----------------------------------------------------------------------------------------------------
     * | --------------------------------------------------------------
     * |BotUserData                |  Bot controlled Object which is tracked on
     * the user regardless of the channel they communicate on    | BotUserData: {
     * 'Welcomed' : true }
     * |BotConversationData        | Bot controlled object which is tracked on the
     * conversation regardless of the user you are talking to |
     * BotConversationData:  'MessageCount':13 }
     * |BotPerUserConversationData | Bot controlled object which is tracked on a
     * user in a given conversation                             |
     * BotPerUserConversationData : {'LastRequest' : 'FavoriteColor' }
     *
     * @param {object} message message to send
     * 
     * @param {string} [message.type] The type of the message. Possible values for
     * this property include: 'Message', 'Ping', 'DeleteUserData',
     * 'BotAddedToConversation', 'BotRemovedFromConversation',
     * 'UserAddedToConversation', 'UserRemovedFromConversation',
     * 'EndOfConversation'.
     * 
     * @param {string} [message.id] Id for the message (always assigned by
     * transport)
     * 
     * @param {string} [message.conversationId] Bot.Connector ConverationId id
     * (always assigned by transport)
     * 
     * @param {date} [message.created] Timestamp of when the message was created
     * 
     * @param {string} [message.sourceText] (if translated) The OriginalText of
     * the message
     * 
     * @param {string} [message.sourceLanguage] (if translated) The language of
     * the original message.
     * 
     * @param {string} [message.language] The language code of the Text field
     * 
     * @param {string} [message.text] The text of the message
     * 
     * @param {array} [message.attachments] Array of content attachments to things
     * like images
     * 
     * @param {object} [message.from] ChannelAccount of the user or bot that is
     * sending the message
     * 
     * @param {object} [message.to] ChannelAccount of hte user or bot the message
     * is being routed to
     * 
     * @param {string} [message.to.name] Display friendly name of the user or bot
     * 
     * @param {string} [message.to.channelId] Channel Id that the channelAccount
     * is to be communicated with (Example: slack, sms, email, groupme, skype,
     * twitter, etc.)
     * 
     * @param {string} [message.to.address] Channel Address for the channelAccount
     * (Example: joe@smith.com, or @joesmith or 123456)
     * 
     * @param {string} [message.to.id] Id - id of the shared bot or user this
     * channelaccount refers to
     * 
     * @param {boolean} [message.to.isBot] Is this id a bot?
     * 
     * @param {string} [message.replyToMessageId] The message Id that this message
     * is a reply to
     * 
     * @param {array} [message.participants] List of ChannelAccounts in the
     * conversation
     * 
     * @param {number} [message.totalParticipants] Total participants in the
     * conversation.  2 means 1:1 message  User - Bot
     * 
     * @param {array} [message.mentions] Array of mentions from the channel context
     * 
     * @param {string} [message.place] Place in user readable format:
     * 
     * @param {string} [message.channelMessageId] Channel Message Id
     * 
     * @param {string} [message.channelConversationId] Channel Conversation Id
     * 
     * @param {object} [message.channelData] Channel specific payload
     * 
     * @param {object} [message.botUserData] Bot's User data object
     * 
     * @param {object} [message.botConversationData] Bot's Conversation Data object
     * 
     * @param {object} [message.botPerUserInConversationData] Bot's Per User in a
     * conversation data object
     * 
     * @param {object} [message.location] Location information (see
     * https://dev.onedrive.com/facets/location_facet.htm)
     * 
     * @param {number} [message.location.altitude] Altitude
     * 
     * @param {number} [message.location.latitude] Latitude for the user when the
     * message was created
     * 
     * @param {number} [message.location.longitude] Longitude for the user when
     * the message was created
     * 
     * @param {string} [message.location.name] Name for user location when the
     * message was created
     * 
     * @param {array} [message.hashtags] Hashtags for the message
     * 
     * @param {string} [message.eTag]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sendMessage(message: models.Message, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    sendMessage(message: models.Message, callback: ServiceCallback<any>): void;
}
